// Generated by CoffeeScript 1.3.3
(function() {
  var NextFlow, next,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NextFlow = (function() {

    function NextFlow(nextObject) {
      var key, val, _ref,
        _this = this;
      this.nextObject = nextObject;
      this.next = __bind(this.next, this);

      this.error = __bind(this.error, this);

      this.keys = [];
      this.funcs = [];
      this.current = null;
      this.errorFunc = null;
      this._checkForErrorFunction();
      _ref = this.nextObject;
      for (key in _ref) {
        val = _ref[key];
        if (this.nextObject.hasOwnProperty(key)) {
          this.keys.push(key);
          this.funcs.push(val);
          (function(key, val) {
            return _this[key] = function() {
              this.current = key;
              return val.apply(this, arguments);
            };
          })(key, val);
        }
      }
    }

    NextFlow.prototype.error = function() {
      if (this.errorFunc != null) {
        return this.errorFunc.apply(this, arguments);
      } else {
        throw new Error('Error function not set.');
      }
    };

    NextFlow.prototype.next = function(err) {
      var idx;
      if ((err != null) && err instanceof Error && (this.errorFunc != null)) {
        this.errorFunc(err);
        return;
      }
      if (this.current === null) {
        this.current = this.keys[0];
        try {
          return this.funcs[0].apply(this, arguments);
        } catch (error) {
          if (this.errorFunc != null) {
            return this.errorFunc(error);
          } else {
            throw error;
          }
        }
      } else {
        idx = this.keys.indexOf(this.current);
        idx += 1;
        this.current = this.keys[idx];
        try {
          return this.funcs[idx].apply(this, arguments);
        } catch (error) {
          if (this.errorFunc != null) {
            return this.errorFunc(error);
          } else {
            throw error;
          }
        }
      }
    };

    NextFlow.prototype._checkForErrorFunction = function() {
      var key, val, _ref, _results;
      _ref = this.nextObject;
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        if (this.nextObject.hasOwnProperty(key)) {
          if (key.toLowerCase() === 'error') {
            this.errorFunc = val;
            _results.push(delete this.nextObject[key]);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return NextFlow;

  })();

  next = function(nextObject) {
    var nf;
    if (typeof nextObject !== 'object') {
      throw new Error('next() function expected object.');
    }
    nf = new NextFlow(nextObject);
    return nf.next();
  };

  module.exports = next;

}).call(this);
