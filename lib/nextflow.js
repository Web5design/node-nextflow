// Generated by CoffeeScript 1.3.3
(function() {
  var NextFlow, next,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NextFlow = (function() {

    function NextFlow(nextObject) {
      var key, val, _ref,
        _this = this;
      this.nextObject = nextObject;
      this.next = __bind(this.next, this);

      this.error = __bind(this.error, this);

      this.keys = [];
      this.funcs = [];
      this.current = null;
      this.errorFunc = null;
      Object.keys(this.nextObject).forEach(function(key) {
        if (key.toLowerCase() === 'error') {
          _this.errorFunc = _this.nextObject[key];
          return delete _this.nextObject[key];
        }
      });
      _ref = this.nextObject;
      for (key in _ref) {
        val = _ref[key];
        if (this.nextObject.hasOwnProperty(key)) {
          this.keys.push(key);
          this.funcs.push(val);
          (function(key, val) {
            return _this[key] = function() {
              _this.current = key;
              return val.apply(_this, arguments);
            };
          })(key, val);
        }
      }
    }

    NextFlow.prototype.error = function() {
      if (this.errorFunc != null) {
        return this.errorFunc.apply(this, arguments);
      } else {
        throw new Error('Error function not set.');
      }
    };

    NextFlow.prototype.next = function(err) {
      var idx;
      if ((err != null) && err instanceof Error && (this.errorFunc != null)) {
        this.errorFunc(err);
        return;
      }
      if (this.current === null) {
        this.current = this.keys[0];
        try {
          return this.funcs[0].apply(this, arguments);
        } catch (error) {
          if (this.errorFunc != null) {
            return this.errorFunc(error);
          } else {
            throw error;
          }
        }
      } else {
        idx = this.keys.indexOf(this.current);
        idx += 1;
        this.current = this.keys[idx];
        try {
          return this.funcs[idx].apply(this, arguments);
        } catch (error) {
          if (this.errorFunc != null) {
            return this.errorFunc(error);
          } else {
            throw error;
          }
        }
      }
    };

    return NextFlow;

  })();

  next = function(nextObject) {
    var nf;
    if (typeof nextObject !== 'object') {
      throw new Error('next() function expected object.');
    }
    nf = new NextFlow(nextObject);
    return nf.next();
  };

  module.exports = function(nextObject) {
    var current, errorFunc, funcs, key, keys, val,
      _this = this;
    if (typeof nextObject !== 'object') {
      throw new Error('next() function expected object.');
    }
    keys = [];
    funcs = [];
    current = null;
    errorFunc = null;
    Object.keys(nextObject).forEach(function(key) {
      if (key.toLowerCase() === 'error') {
        errorFunc = nextObject[key];
        delete nextObject[key];
        return nextObject['error'] = errorFunc;
      }
    });
    for (key in nextObject) {
      val = nextObject[key];
      if (nextObject.hasOwnProperty(key)) {
        keys.push(key);
        funcs.push(val);
        (function(key, val) {
          return nextObject[key] = function() {
            current = key;
            return val.apply(nextObject, arguments);
          };
        })(key, val);
      }
    }
    nextObject.next = function(err) {
      var idx;
      if ((err != null) && err instanceof Error && (errorFunc != null)) {
        errorFunc(err);
        return;
      }
      if (current === null) {
        current = keys[0];
        try {
          return funcs[0].apply(nextObject, arguments);
        } catch (error) {
          if (errorFunc != null) {
            return errorFunc(error);
          } else {
            throw error;
          }
        }
      } else {
        idx = keys.indexOf(current);
        idx += 1;
        current = keys[idx];
        try {
          return funcs[idx].apply(nextObject, arguments);
        } catch (error) {
          if (errorFunc != null) {
            return errorFunc(error);
          } else {
            throw error;
          }
        }
      }
    };
    return nextObject.next();
  };

}).call(this);
