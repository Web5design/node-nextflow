// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = function(nextObject) {
    var current, errorFunc, funcs, key, keys, val,
      _this = this;
    if (typeof nextObject !== 'object') {
      throw new Error('next() function expected object.');
    }
    keys = [];
    funcs = [];
    current = null;
    errorFunc = null;
    Object.keys(nextObject).forEach(function(key) {
      if (key.toLowerCase() === 'error') {
        errorFunc = nextObject[key];
        delete nextObject[key];
        return nextObject['error'] = errorFunc;
      }
    });
    for (key in nextObject) {
      val = nextObject[key];
      if (nextObject.hasOwnProperty(key)) {
        keys.push(key);
        funcs.push(val);
        (function(key, val) {
          return nextObject[key] = function() {
            current = key;
            return val.apply(nextObject, arguments);
          };
        })(key, val);
      }
    }
    nextObject.next = function(err) {
      var idx;
      if ((err != null) && err instanceof Error && (errorFunc != null)) {
        errorFunc(err);
        return;
      }
      if (current === null) {
        current = keys[0];
        try {
          return funcs[0].apply(nextObject, arguments);
        } catch (error) {
          if (errorFunc != null) {
            return errorFunc(error);
          } else {
            throw error;
          }
        }
      } else {
        idx = keys.indexOf(current);
        idx += 1;
        current = keys[idx];
        try {
          return funcs[idx].apply(nextObject, arguments);
        } catch (error) {
          if (errorFunc != null) {
            return errorFunc(error);
          } else {
            throw error;
          }
        }
      }
    };
    return nextObject.next();
  };

}).call(this);
